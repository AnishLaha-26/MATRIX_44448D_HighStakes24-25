#include "main.h"
#include "lemlib/api.hpp" // IWYU pragma: keep
#include "pros/motors.h"

//CONTROLLER CONFIG
pros::Controller controller(pros::E_CONTROLLER_MASTER);

//MOTOR CONFIG
//TO DO: Change Ports and configure directions (- / + on ports)
pros::MotorGroup left_motors({1, -2, 3}, pros::MotorGearset::blue); // left motors use 600 RPM cartrifges
pros::MotorGroup right_motors({4, 5, 6}, pros::MotorGearset::blue); // right motors use 600 RPM cartridges

//DRIVETRAIN CONFIG
// TO DO: Update drivetrain settings, 1. update trackwidth (width between wheels of robot), 2. update RPM using calculation from gear ratio 
lemlib::Drivetrain drivetrain(&left_motors, // left motor group
                              &right_motors, // right motor group
                              10, // 10 inch track width
                              lemlib::Omniwheel::OLD_325, // using new 4" omnis
                              360, // drivetrain rpm is 360
                              2 // horizontal drift is 2 (for now)
);

//INERTIAL SENSOR CONFIG  
// create an imu on port 10
//pros::Imu imu(10);

//TRACKING WHEELS CONFIG
//TO DO: use initialize to check the direction of all sensors. (Forward should increase value, reverse should decrease value) (- / + on ports)
// horizontal wheel
pros::Rotation horizontal_sensor(7);
// vertical wheel 1
pros::Rotation vertical_sensor_1(8);
// vertical wheel 2
//pros::Rotation vertical_sensor_2(9);

//TO DO: Change offset of tracking wheels (- is left) (- is back)
// horizontal tracking wheel
lemlib::TrackingWheel horizontal_tracking_wheel(&horizontal_sensor, lemlib::Omniwheel::NEW_275, -5.75);
// vertical tracking wheels
lemlib::TrackingWheel vertical_tracking_wheel1(&vertical_sensor_1, lemlib::Omniwheel::NEW_275, -5.75);
//lemlib::TrackingWheel vertical_tracking_wheel2(&vertical_sensor_2, lemlib::Omniwheel::NEW_275, -5.75);

//ODOMOETRY CONFIG
lemlib::OdomSensors sensors(&vertical_tracking_wheel1, // vertical tracking wheel 1, set to null
                            nullptr, // vertical tracking wheel 2,
                            &horizontal_tracking_wheel, // horizontal tracking wheel 1
                            nullptr, // horizontal tracking wheel 2, set to nullptr as we don't have a second one
                            nullptr // inertial sensor
							);

//PID CONFIG
//TO DO: Tune constants after going through tuning tutorial
// lateral PID controller
lemlib::ControllerSettings lateral_controller(10, // proportional gain (kP)
                                              0, // integral gain (kI)
                                              3, // derivative gain (kD)
                                              3, // anti windup
                                              1, // small error range, in inches
                                              100, // small error range timeout, in milliseconds
                                              3, // large error range, in inches
                                              500, // large error range timeout, in milliseconds
                                              20 // maximum acceleration (slew)
);

// angular PID controller
lemlib::ControllerSettings angular_controller(2, // proportional gain (kP)
                                              0, // integral gain (kI)
                                              10, // derivative gain (kD)
                                              3, // anti windup
                                              1, // small error range, in degrees
                                              100, // small error range timeout, in milliseconds
                                              3, // large error range, in degrees
                                              500, // large error range timeout, in milliseconds
                                              0 // maximum acceleration (slew)							
);

// input curve for throttle input during driver control
lemlib::ExpoDriveCurve throttleCurve(3, // joystick deadband out of 127
                                     10, // minimum output where drivetrain will move out of 127
                                     1.019 // expo curve gain
);

// input curve for steer input during driver control
lemlib::ExpoDriveCurve steerCurve(3, // joystick deadband out of 127
                                  10, // minimum output where drivetrain will move out of 127
                                  1.019 // expo curve gain
);


//CHASSIS CONFIG
lemlib::Chassis chassis(drivetrain, // drivetrain settings
                        lateral_controller, // lateral PID settings
                        angular_controller, // angular PID settings
                        sensors, // odometry sensors
						&throttleCurve, 
						&steerCurve
);


/**
 * A callback function for LLEMU's center button.
 *
 * When this callback is fired, it will toggle line 2 of the LCD text between
 * "I was pressed!" and nothing.
 */
void on_center_button() {
	static bool pressed = false;
	pressed = !pressed;
	if (pressed) {
		pros::lcd::set_text(2, "I was pressed!");
	} else {
		pros::lcd::clear_line(2);
	}
}

/**

 * Runs initialization code. This occurs as soon as the program is started.
 *
 * All other competition modes are blocked by initialize; it is recommended
 * to keep execution time for this mode under a few seconds.
 */


void initialize() {
	pros::lcd::initialize();
	chassis.calibrate(); 
	while (true) { // infinite loop
        // print measurements from the adi encoder
        int leftY = controller.get_analog(pros::E_CONTROLLER_ANALOG_LEFT_Y);
        pros::lcd::print(2, "Rotation Sensor: %i", vertical_sensor_1.get_position());
        pros::lcd::print(3, "Controller: %i", leftY);
        pros::delay(10); // delay to save resources. DO NOT REMOVE
		// // get left y and right y positions
        // int leftY = controller.get_analog(pros::E_CONTROLLER_ANALOG_LEFT_Y);
        // int rightY = controller.get_analog(pros::E_CONTROLLER_ANALOG_RIGHT_Y);
		// pros::lcd::print(0, "Left RPM: %f", leftY);
		// pros::lcd::print(1, "Right RPM: %f", rightY);
    }

	// TO DO: Uncomment code below after the rotation sensor directions have been done

	// chassis.calibrate(); // calibrate sensors
    // // print position to brain screen
    // pros::Task screen_task([&]() {
    //     while (true) {
    //         // print robot location to the brain screen
    //         pros::lcd::print(0, "X: %f", chassis.getPose().x); // x
    //         pros::lcd::print(1, "Y: %f", chassis.getPose().y); // y
    //         pros::lcd::print(2, "Theta: %f", chassis.getPose().theta); // heading
    //         // delay to save resources
    //         pros::delay(20);
    //     }
    // });

}

/**
 * Runs while the robot is in the disabled state of Field Management System or
 * the VEX Competition Switch, following either autonomous or opcontrol. When
 * the robot is enabled, this task will exit.
 */
void disabled() {}

/**
 * Runs after initialize(), and before autonomous when connected to the Field
 * Management System or the VEX Competition Switch. This is intended form
 * competition-specific initialization routines, such as an autonomous selector
 * on the LCD.
 *
 * This task will exit when the robot is enabled and autonomous or opcontrol
 * starts.
 */
void competition_initialize() {}

/**
 * Runs the user autonomous code. This function will be started in its own task
 * with the default priority and stack size whenever the robot is enabled via
 * the Field Management System or the VEX Competition Switch in the autonomous
 * mode. Alternatively, this function may be called in initialize or opcontrol
 * for non-competition testing purposes.
 *
 * If the robot is disabled or communications is lost, the autonomous task
 * will be stopped. Re-enabling the robot will restart the task, not re-start it
 * from where it left off.
 */
pros::Controller master(pros::E_CONTROLLER_MASTER);
void autonomous() {
	    while (true) {
        // // get left y and right y positions
        // int leftY = controller.get_analog(pros::E_CONTROLLER_ANALOG_LEFT_Y);
        // int rightY = controller.get_analog(pros::E_CONTROLLER_ANALOG_RIGHT_Y);
        

        // // move the robot
        // chassis.tank(leftY, rightY);

		// double rpm_left = left_motors.get_actual_velocity();
		// double rpm_right = right_motors.get_actual_velocity();

		// // print the RPM of the left and right motors
		// pros::lcd::print(0, "Left RPM: %f", leftY);
		// pros::lcd::print(1, "Right RPM: %f", rightY);


        // // delay to save resources
        // pros::delay(25);
        pros::Motor motor(20, pros::v5::MotorGears::blue, pros::v5::MotorUnits::rotations); 
        motor.move_voltage(12000);
	    pros::delay(1000); // Move at max voltage for 1 second
	    motor.move_voltage(0);


		
    }
}


/**
 * Runs the operator control code. This function will be started in its own task
 * with the default priority and stack size whenever the robot is enabled via
 * the Field Management System or the VEX Competition Switch in the operator
 * control mode.
 *
 * If no competition control is connected, this function will run immediately
 * following initialize().
 *
 * If the robot is disabled or communications is lost, the
 * operator control task will be stopped. Re-enabling the robot will restart the
 * task, not resume it from where it left off.
 */
void opcontrol() {

	//master.clear();
	// loop forever
    while (true) {

        pros::Motor motor(20, pros::v5::MotorGears::blue, pros::v5::MotorUnits::rotations); 
        // get left y and right y positions
        int leftY = controller.get_analog(pros::E_CONTROLLER_ANALOG_LEFT_Y);
        motor.move(leftY);
        int rightY = controller.get_analog(pros::E_CONTROLLER_ANALOG_RIGHT_Y);
        motor.move_voltage(leftY*100);
       // std::cout << "Motor Velocity: " << motor.get_actual_velocity_all()[0];
        void tank(int left, int right, bool disableDriveCurve = false);

        pros::delay(25);

        // move the robot
        chassis.tank(leftY, rightY, true);

		// double rpm_left = left_motors.get_actual_velocity();
		// double rpm_right = right_motors.get_actual_velocity();

		// // print the RPM of the left and right motors
		// pros::lcd::print(0, "Left RPM: %f", rpm_left);
		// pros::lcd::print(1, "Right RPM: %f", rpm_right);


        // // delay to save resources
       // pros::delay(25);
    }
}